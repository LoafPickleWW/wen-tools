/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
// @ts-ignore
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
// @ts-ignore
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
// @ts-ignore
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
// @ts-ignore
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
// @ts-ignore
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CirculatingSupply","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"set_asset","desc":"Set the ASA ID for the circulating supply - Authorization: ASA Manager Address","args":[{"name":"asset_id","type":"uint64","desc":"ASA ID of the circulating supply"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"set_not_circulating_address","desc":"Set non-circulating supply addresses - Authorization: ASA Manager Address","args":[{"name":"address","type":"address","desc":"Address to assign to the label to"},{"name":"label","type":"string","desc":"Not-circulating label selector"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc62_get_circulating_supply","desc":"Get ASA circulating supply","readonly":true,"args":[{"name":"asset_id","type":"uint64","desc":"ASA ID of the circulating supply"}],"returns":{"type":"uint64","desc":"ASA circulating supply"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":3,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"asset_id":{"key":"YXNzZXRfaWQ=","keyType":"AVMBytes","valueType":"uint64"},"not_circulating_label_1":{"key":"YnVybmVk","keyType":"AVMBytes","valueType":"address"},"not_circulating_label_2":{"key":"bG9ja2Vk","keyType":"AVMBytes","valueType":"address"},"not_circulating_label_3":{"key":"Z2VuZXJpYw==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Arc62.algo.ts:8","pc":[0]},{"teal":2,"source":"contracts\\Arc62.algo.ts:8","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\Arc62.algo.ts:8","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]},{"teal":15,"source":"contracts\\Arc62.algo.ts:8","pc":[39,40]},{"teal":16,"source":"contracts\\Arc62.algo.ts:8","pc":[41]},{"teal":17,"source":"contracts\\Arc62.algo.ts:8","pc":[42,43]},{"teal":18,"source":"contracts\\Arc62.algo.ts:8","pc":[44]},{"teal":19,"source":"contracts\\Arc62.algo.ts:8","pc":[45,46]},{"teal":20,"source":"contracts\\Arc62.algo.ts:8","pc":[47]},{"teal":21,"source":"contracts\\Arc62.algo.ts:8","pc":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73]},{"teal":25,"source":"contracts\\Arc62.algo.ts:8","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[74]},{"teal":30,"source":"contracts\\Arc62.algo.ts:17","pc":[75,76,77]},{"teal":31,"source":"contracts\\Arc62.algo.ts:17","pc":[78]},{"teal":32,"source":"contracts\\Arc62.algo.ts:17","pc":[79]},{"teal":36,"source":"contracts\\Arc62.algo.ts:17","pc":[80,81,82]},{"teal":40,"source":"contracts\\Arc62.algo.ts:18","pc":[83,84]},{"teal":41,"source":"contracts\\Arc62.algo.ts:18","pc":[85]},{"teal":42,"source":"contracts\\Arc62.algo.ts:18","pc":[86]},{"teal":46,"source":"contracts\\Arc62.algo.ts:20","pc":[87]},{"teal":47,"source":"contracts\\Arc62.algo.ts:20","pc":[88,89]},{"teal":48,"source":"contracts\\Arc62.algo.ts:20","pc":[90]},{"teal":52,"source":"contracts\\Arc62.algo.ts:22","pc":[91]},{"teal":53,"source":"contracts\\Arc62.algo.ts:22","pc":[92,93]},{"teal":54,"source":"contracts\\Arc62.algo.ts:22","pc":[94]},{"teal":58,"source":"contracts\\Arc62.algo.ts:24","pc":[95]},{"teal":59,"source":"contracts\\Arc62.algo.ts:24","pc":[96,97]},{"teal":60,"source":"contracts\\Arc62.algo.ts:24","pc":[98]},{"teal":61,"source":"contracts\\Arc62.algo.ts:17","pc":[99]},{"teal":66,"source":"contracts\\Arc62.algo.ts:31","pc":[100,101,102]},{"teal":67,"source":"contracts\\Arc62.algo.ts:31","pc":[103]},{"teal":70,"source":"contracts\\Arc62.algo.ts:31","pc":[104,105,106]},{"teal":71,"source":"contracts\\Arc62.algo.ts:31","pc":[107]},{"teal":72,"source":"contracts\\Arc62.algo.ts:31","pc":[108]},{"teal":79,"source":"contracts\\Arc62.algo.ts:31","pc":[109,110,111]},{"teal":82,"source":"contracts\\Arc62.algo.ts:31","pc":[112]},{"teal":86,"source":"contracts\\Arc62.algo.ts:32","pc":[113,114]},{"teal":87,"source":"contracts\\Arc62.algo.ts:32","pc":[115,116]},{"teal":91,"source":"contracts\\Arc62.algo.ts:33","pc":[117,118]},{"teal":92,"source":"contracts\\Arc62.algo.ts:33","pc":[119,120]},{"teal":93,"source":"contracts\\Arc62.algo.ts:33","pc":[121,122]},{"teal":94,"source":"contracts\\Arc62.algo.ts:33","pc":[123]},{"teal":95,"source":"contracts\\Arc62.algo.ts:33","pc":[124]},{"teal":96,"source":"contracts\\Arc62.algo.ts:33","pc":[125]},{"teal":97,"source":"contracts\\Arc62.algo.ts:33","pc":[126,127,128]},{"teal":98,"source":"contracts\\Arc62.algo.ts:33","pc":[129,130]},{"teal":99,"source":"contracts\\Arc62.algo.ts:33","pc":[131]},{"teal":100,"source":"contracts\\Arc62.algo.ts:33","pc":[132]},{"teal":101,"source":"contracts\\Arc62.algo.ts:33","pc":[133]},{"teal":105,"source":"contracts\\Arc62.algo.ts:33","errorMessage":"Unauthorized","pc":[134]},{"teal":109,"source":"contracts\\Arc62.algo.ts:34","pc":[135,136]},{"teal":110,"source":"contracts\\Arc62.algo.ts:34","pc":[137,138]},{"teal":111,"source":"contracts\\Arc62.algo.ts:34","pc":[139]},{"teal":112,"source":"contracts\\Arc62.algo.ts:31","pc":[140]},{"teal":117,"source":"contracts\\Arc62.algo.ts:42","pc":[141,142,143]},{"teal":118,"source":"contracts\\Arc62.algo.ts:42","pc":[144,145,146]},{"teal":121,"source":"contracts\\Arc62.algo.ts:42","pc":[147,148,149]},{"teal":122,"source":"contracts\\Arc62.algo.ts:42","pc":[150]},{"teal":123,"source":"contracts\\Arc62.algo.ts:42","pc":[151]},{"teal":124,"source":"contracts\\Arc62.algo.ts:42","pc":[152,153]},{"teal":125,"source":"contracts\\Arc62.algo.ts:42","pc":[154]},{"teal":128,"source":"contracts\\Arc62.algo.ts:42","errorMessage":"argument 1 (address) for set_not_circulating_address must be a address","pc":[155]},{"teal":131,"source":"contracts\\Arc62.algo.ts:42","pc":[156,157,158]},{"teal":132,"source":"contracts\\Arc62.algo.ts:42","pc":[159]},{"teal":133,"source":"contracts\\Arc62.algo.ts:42","pc":[160]},{"teal":141,"source":"contracts\\Arc62.algo.ts:42","pc":[161,162,163]},{"teal":144,"source":"contracts\\Arc62.algo.ts:42","pc":[164]},{"teal":148,"source":"contracts\\Arc62.algo.ts:43","pc":[165,166]},{"teal":149,"source":"contracts\\Arc62.algo.ts:43","pc":[167]},{"teal":150,"source":"contracts\\Arc62.algo.ts:43","pc":[168,169]},{"teal":154,"source":"contracts\\Arc62.algo.ts:44","pc":[170,171]},{"teal":155,"source":"contracts\\Arc62.algo.ts:44","pc":[172,173]},{"teal":156,"source":"contracts\\Arc62.algo.ts:44","pc":[174,175]},{"teal":157,"source":"contracts\\Arc62.algo.ts:44","pc":[176]},{"teal":158,"source":"contracts\\Arc62.algo.ts:44","pc":[177]},{"teal":161,"source":"contracts\\Arc62.algo.ts:44","errorMessage":"Unauthorized","pc":[178]},{"teal":165,"source":"contracts\\Arc62.algo.ts:45","pc":[179,180]},{"teal":166,"source":"contracts\\Arc62.algo.ts:45","pc":[181,182]},{"teal":167,"source":"contracts\\Arc62.algo.ts:45","pc":[183,184]},{"teal":168,"source":"contracts\\Arc62.algo.ts:45","pc":[185]},{"teal":169,"source":"contracts\\Arc62.algo.ts:45","pc":[186]},{"teal":172,"source":"contracts\\Arc62.algo.ts:45","errorMessage":"Not Opted-In","pc":[187]},{"teal":177,"source":"contracts\\Arc62.algo.ts:47","pc":[188,189]},{"teal":178,"source":"contracts\\Arc62.algo.ts:47","pc":[190]},{"teal":179,"source":"contracts\\Arc62.algo.ts:47","pc":[191]},{"teal":180,"source":"contracts\\Arc62.algo.ts:47","pc":[192,193,194]},{"teal":185,"source":"contracts\\Arc62.algo.ts:48","pc":[195]},{"teal":186,"source":"contracts\\Arc62.algo.ts:48","pc":[196,197]},{"teal":187,"source":"contracts\\Arc62.algo.ts:48","pc":[198]},{"teal":188,"source":"contracts\\Arc62.algo.ts:47","pc":[199,200,201]},{"teal":193,"source":"contracts\\Arc62.algo.ts:49","pc":[202,203]},{"teal":194,"source":"contracts\\Arc62.algo.ts:49","pc":[204]},{"teal":195,"source":"contracts\\Arc62.algo.ts:49","pc":[205]},{"teal":196,"source":"contracts\\Arc62.algo.ts:49","pc":[206,207,208]},{"teal":201,"source":"contracts\\Arc62.algo.ts:50","pc":[209]},{"teal":202,"source":"contracts\\Arc62.algo.ts:50","pc":[210,211]},{"teal":203,"source":"contracts\\Arc62.algo.ts:50","pc":[212]},{"teal":204,"source":"contracts\\Arc62.algo.ts:49","pc":[213,214,215]},{"teal":209,"source":"contracts\\Arc62.algo.ts:51","pc":[216,217]},{"teal":210,"source":"contracts\\Arc62.algo.ts:51","pc":[218]},{"teal":211,"source":"contracts\\Arc62.algo.ts:51","pc":[219]},{"teal":212,"source":"contracts\\Arc62.algo.ts:51","pc":[220,221,222]},{"teal":217,"source":"contracts\\Arc62.algo.ts:52","pc":[223]},{"teal":218,"source":"contracts\\Arc62.algo.ts:52","pc":[224,225]},{"teal":219,"source":"contracts\\Arc62.algo.ts:52","pc":[226]},{"teal":220,"source":"contracts\\Arc62.algo.ts:51","pc":[227,228,229]},{"teal":225,"source":"contracts\\Arc62.algo.ts:54","pc":[230]},{"teal":228,"source":"contracts\\Arc62.algo.ts:54","errorMessage":"Invalid Label","pc":[231]},{"teal":231,"source":"contracts\\Arc62.algo.ts:42","pc":[232]},{"teal":236,"source":"contracts\\Arc62.algo.ts:63","pc":[233,234,235,236,237,238]},{"teal":239,"source":"contracts\\Arc62.algo.ts:64","pc":[239,240,241]},{"teal":240,"source":"contracts\\Arc62.algo.ts:64","pc":[242]},{"teal":243,"source":"contracts\\Arc62.algo.ts:63","pc":[243,244,245]},{"teal":244,"source":"contracts\\Arc62.algo.ts:63","pc":[246]},{"teal":245,"source":"contracts\\Arc62.algo.ts:63","pc":[247]},{"teal":246,"source":"contracts\\Arc62.algo.ts:63","pc":[248]},{"teal":247,"source":"contracts\\Arc62.algo.ts:63","pc":[249]},{"teal":248,"source":"contracts\\Arc62.algo.ts:63","pc":[250]},{"teal":256,"source":"contracts\\Arc62.algo.ts:63","pc":[251,252,253]},{"teal":259,"source":"contracts\\Arc62.algo.ts:63","pc":[254]},{"teal":260,"source":"contracts\\Arc62.algo.ts:63","pc":[255,256]},{"teal":264,"source":"contracts\\Arc62.algo.ts:65","pc":[257,258]},{"teal":265,"source":"contracts\\Arc62.algo.ts:65","pc":[259,260]},{"teal":269,"source":"contracts\\Arc62.algo.ts:66","pc":[261,262]},{"teal":270,"source":"contracts\\Arc62.algo.ts:66","pc":[263]},{"teal":271,"source":"contracts\\Arc62.algo.ts:66","pc":[264,265]},{"teal":272,"source":"contracts\\Arc62.algo.ts:66","pc":[266]},{"teal":275,"source":"contracts\\Arc62.algo.ts:66","errorMessage":"Invalid ASA ID","pc":[267]},{"teal":279,"source":"contracts\\Arc62.algo.ts:68","pc":[268]},{"teal":280,"source":"contracts\\Arc62.algo.ts:68","pc":[269,270]},{"teal":284,"source":"contracts\\Arc62.algo.ts:69","pc":[271]},{"teal":285,"source":"contracts\\Arc62.algo.ts:69","pc":[272,273]},{"teal":289,"source":"contracts\\Arc62.algo.ts:70","pc":[274]},{"teal":290,"source":"contracts\\Arc62.algo.ts:70","pc":[275,276]},{"teal":294,"source":"contracts\\Arc62.algo.ts:71","pc":[277]},{"teal":295,"source":"contracts\\Arc62.algo.ts:71","pc":[278,279]},{"teal":300,"source":"contracts\\Arc62.algo.ts:73","pc":[280,281]},{"teal":301,"source":"contracts\\Arc62.algo.ts:73","pc":[282,283]},{"teal":302,"source":"contracts\\Arc62.algo.ts:73","pc":[284]},{"teal":303,"source":"contracts\\Arc62.algo.ts:73","pc":[285,286]},{"teal":304,"source":"contracts\\Arc62.algo.ts:73","pc":[287]},{"teal":305,"source":"contracts\\Arc62.algo.ts:73","pc":[288]},{"teal":306,"source":"contracts\\Arc62.algo.ts:73","pc":[289,290,291]},{"teal":307,"source":"contracts\\Arc62.algo.ts:73","pc":[292,293]},{"teal":308,"source":"contracts\\Arc62.algo.ts:73","pc":[294,295]},{"teal":309,"source":"contracts\\Arc62.algo.ts:73","pc":[296]},{"teal":310,"source":"contracts\\Arc62.algo.ts:73","pc":[297,298]},{"teal":311,"source":"contracts\\Arc62.algo.ts:73","pc":[299,300]},{"teal":312,"source":"contracts\\Arc62.algo.ts:73","pc":[301]},{"teal":313,"source":"contracts\\Arc62.algo.ts:73","pc":[302]},{"teal":314,"source":"contracts\\Arc62.algo.ts:73","pc":[303]},{"teal":315,"source":"contracts\\Arc62.algo.ts:73","pc":[304]},{"teal":316,"source":"contracts\\Arc62.algo.ts:73","pc":[305]},{"teal":319,"source":"contracts\\Arc62.algo.ts:73","pc":[306,307,308]},{"teal":324,"source":"contracts\\Arc62.algo.ts:74","pc":[309]},{"teal":325,"source":"contracts\\Arc62.algo.ts:74","pc":[310,311]},{"teal":326,"source":"contracts\\Arc62.algo.ts:73","pc":[312,313,314]},{"teal":331,"source":"contracts\\Arc62.algo.ts:76","pc":[315,316]},{"teal":332,"source":"contracts\\Arc62.algo.ts:76","pc":[317,318]},{"teal":333,"source":"contracts\\Arc62.algo.ts:76","pc":[319]},{"teal":334,"source":"contracts\\Arc62.algo.ts:76","pc":[320,321]},{"teal":335,"source":"contracts\\Arc62.algo.ts:76","pc":[322,323]},{"teal":336,"source":"contracts\\Arc62.algo.ts:76","pc":[324]},{"teal":337,"source":"contracts\\Arc62.algo.ts:76","pc":[325,326]},{"teal":344,"source":"contracts\\Arc62.algo.ts:80","pc":[327]},{"teal":345,"source":"contracts\\Arc62.algo.ts:80","pc":[328]},{"teal":346,"source":"contracts\\Arc62.algo.ts:80","pc":[329,330]},{"teal":347,"source":"contracts\\Arc62.algo.ts:80","pc":[331]},{"teal":348,"source":"contracts\\Arc62.algo.ts:80","pc":[332]},{"teal":349,"source":"contracts\\Arc62.algo.ts:80","pc":[333,334,335]},{"teal":350,"source":"contracts\\Arc62.algo.ts:81","pc":[336]},{"teal":351,"source":"contracts\\Arc62.algo.ts:81","pc":[337]},{"teal":352,"source":"contracts\\Arc62.algo.ts:81","pc":[338,339]},{"teal":353,"source":"contracts\\Arc62.algo.ts:81","pc":[340,341]},{"teal":354,"source":"contracts\\Arc62.algo.ts:81","pc":[342]},{"teal":355,"source":"contracts\\Arc62.algo.ts:81","pc":[343]},{"teal":356,"source":"contracts\\Arc62.algo.ts:81","pc":[344]},{"teal":357,"source":"contracts\\Arc62.algo.ts:81","pc":[345]},{"teal":358,"source":"contracts\\Arc62.algo.ts:80","pc":[346]},{"teal":361,"source":"contracts\\Arc62.algo.ts:79","pc":[347,348,349]},{"teal":366,"source":"contracts\\Arc62.algo.ts:83","pc":[350]},{"teal":367,"source":"contracts\\Arc62.algo.ts:83","pc":[351,352]},{"teal":368,"source":"contracts\\Arc62.algo.ts:79","pc":[353,354,355]},{"teal":373,"source":"contracts\\Arc62.algo.ts:85","pc":[356]},{"teal":374,"source":"contracts\\Arc62.algo.ts:85","pc":[357]},{"teal":375,"source":"contracts\\Arc62.algo.ts:85","pc":[358,359]},{"teal":376,"source":"contracts\\Arc62.algo.ts:85","pc":[360,361]},{"teal":377,"source":"contracts\\Arc62.algo.ts:85","pc":[362]},{"teal":378,"source":"contracts\\Arc62.algo.ts:85","pc":[363,364]},{"teal":385,"source":"contracts\\Arc62.algo.ts:89","pc":[365]},{"teal":386,"source":"contracts\\Arc62.algo.ts:89","pc":[366]},{"teal":387,"source":"contracts\\Arc62.algo.ts:89","pc":[367,368]},{"teal":388,"source":"contracts\\Arc62.algo.ts:89","pc":[369]},{"teal":389,"source":"contracts\\Arc62.algo.ts:89","pc":[370]},{"teal":390,"source":"contracts\\Arc62.algo.ts:89","pc":[371,372,373]},{"teal":391,"source":"contracts\\Arc62.algo.ts:90","pc":[374]},{"teal":392,"source":"contracts\\Arc62.algo.ts:90","pc":[375]},{"teal":393,"source":"contracts\\Arc62.algo.ts:90","pc":[376,377]},{"teal":394,"source":"contracts\\Arc62.algo.ts:90","pc":[378,379]},{"teal":395,"source":"contracts\\Arc62.algo.ts:90","pc":[380]},{"teal":396,"source":"contracts\\Arc62.algo.ts:90","pc":[381]},{"teal":397,"source":"contracts\\Arc62.algo.ts:90","pc":[382]},{"teal":398,"source":"contracts\\Arc62.algo.ts:90","pc":[383]},{"teal":399,"source":"contracts\\Arc62.algo.ts:89","pc":[384]},{"teal":402,"source":"contracts\\Arc62.algo.ts:88","pc":[385,386,387]},{"teal":407,"source":"contracts\\Arc62.algo.ts:92","pc":[388]},{"teal":408,"source":"contracts\\Arc62.algo.ts:92","pc":[389,390]},{"teal":409,"source":"contracts\\Arc62.algo.ts:88","pc":[391,392,393]},{"teal":414,"source":"contracts\\Arc62.algo.ts:94","pc":[394]},{"teal":415,"source":"contracts\\Arc62.algo.ts:94","pc":[395]},{"teal":416,"source":"contracts\\Arc62.algo.ts:94","pc":[396,397]},{"teal":417,"source":"contracts\\Arc62.algo.ts:94","pc":[398,399]},{"teal":418,"source":"contracts\\Arc62.algo.ts:94","pc":[400]},{"teal":419,"source":"contracts\\Arc62.algo.ts:94","pc":[401,402]},{"teal":426,"source":"contracts\\Arc62.algo.ts:98","pc":[403]},{"teal":427,"source":"contracts\\Arc62.algo.ts:98","pc":[404]},{"teal":428,"source":"contracts\\Arc62.algo.ts:98","pc":[405,406]},{"teal":429,"source":"contracts\\Arc62.algo.ts:98","pc":[407]},{"teal":430,"source":"contracts\\Arc62.algo.ts:98","pc":[408]},{"teal":431,"source":"contracts\\Arc62.algo.ts:98","pc":[409,410,411]},{"teal":432,"source":"contracts\\Arc62.algo.ts:99","pc":[412]},{"teal":433,"source":"contracts\\Arc62.algo.ts:99","pc":[413]},{"teal":434,"source":"contracts\\Arc62.algo.ts:99","pc":[414,415]},{"teal":435,"source":"contracts\\Arc62.algo.ts:99","pc":[416,417]},{"teal":436,"source":"contracts\\Arc62.algo.ts:99","pc":[418]},{"teal":437,"source":"contracts\\Arc62.algo.ts:99","pc":[419]},{"teal":438,"source":"contracts\\Arc62.algo.ts:99","pc":[420]},{"teal":439,"source":"contracts\\Arc62.algo.ts:99","pc":[421]},{"teal":440,"source":"contracts\\Arc62.algo.ts:98","pc":[422]},{"teal":443,"source":"contracts\\Arc62.algo.ts:97","pc":[423,424,425]},{"teal":448,"source":"contracts\\Arc62.algo.ts:101","pc":[426]},{"teal":449,"source":"contracts\\Arc62.algo.ts:101","pc":[427,428]},{"teal":450,"source":"contracts\\Arc62.algo.ts:97","pc":[429,430,431]},{"teal":455,"source":"contracts\\Arc62.algo.ts:103","pc":[432]},{"teal":456,"source":"contracts\\Arc62.algo.ts:103","pc":[433]},{"teal":457,"source":"contracts\\Arc62.algo.ts:103","pc":[434,435]},{"teal":458,"source":"contracts\\Arc62.algo.ts:103","pc":[436,437]},{"teal":459,"source":"contracts\\Arc62.algo.ts:103","pc":[438]},{"teal":460,"source":"contracts\\Arc62.algo.ts:103","pc":[439,440]},{"teal":471,"source":"contracts\\Arc62.algo.ts:107","pc":[441,442]},{"teal":472,"source":"contracts\\Arc62.algo.ts:107","pc":[443,444]},{"teal":473,"source":"contracts\\Arc62.algo.ts:107","pc":[445]},{"teal":474,"source":"contracts\\Arc62.algo.ts:108","pc":[446,447]},{"teal":475,"source":"contracts\\Arc62.algo.ts:107","pc":[448]},{"teal":476,"source":"contracts\\Arc62.algo.ts:109","pc":[449,450]},{"teal":477,"source":"contracts\\Arc62.algo.ts:108","pc":[451]},{"teal":478,"source":"contracts\\Arc62.algo.ts:110","pc":[452,453]},{"teal":479,"source":"contracts\\Arc62.algo.ts:109","pc":[454]},{"teal":480,"source":"contracts\\Arc62.algo.ts:111","pc":[455,456]},{"teal":481,"source":"contracts\\Arc62.algo.ts:110","pc":[457]},{"teal":484,"source":"contracts\\Arc62.algo.ts:63","pc":[458,459]},{"teal":487,"source":"contracts\\Arc62.algo.ts:63","pc":[460,461]},{"teal":488,"source":"contracts\\Arc62.algo.ts:63","pc":[462]},{"teal":491,"source":"contracts\\Arc62.algo.ts:8","pc":[463,464,465,466,467,468]},{"teal":492,"source":"contracts\\Arc62.algo.ts:8","pc":[469,470,471]},{"teal":493,"source":"contracts\\Arc62.algo.ts:8","pc":[472,473,474,475]},{"teal":496,"source":"contracts\\Arc62.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[476]},{"teal":499,"source":"contracts\\Arc62.algo.ts:8","pc":[477,478,479,480,481,482]},{"teal":500,"source":"contracts\\Arc62.algo.ts:8","pc":[483,484,485,486,487,488]},{"teal":501,"source":"contracts\\Arc62.algo.ts:8","pc":[489,490,491,492,493,494]},{"teal":502,"source":"contracts\\Arc62.algo.ts:8","pc":[495,496,497]},{"teal":503,"source":"contracts\\Arc62.algo.ts:8","pc":[498,499,500,501,502,503,504,505]},{"teal":506,"source":"contracts\\Arc62.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[506]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAAEmBQAHZ2VuZXJpYwZidXJuZWQGbG9ja2VkCGFzc2V0X2lkMRgUgQYLMRkIjQwBkwAAAAAAAAAAAAABhQAAAAAAAAAAAAAAiAACI0OKAAAnBCJnKjIDZysyA2cpMgNniTYaAReIAAIjQ4oBACiL/4wAMQCLAHEHSBJJQQAFJwRkFBBEJwSL/2eJNhoCVwIANhoBSRWBIBJEiAACI0OKAgAoJwRkjAAxAIsAcQdIEkSL/4sAcABMSESL/ioSQQAHKov/Z0IAHov+KxJBAAcri/9nQgAQi/4pEkEABymL/2dCAAIiRImABBUffHU2GgEXiAAFFlCwI0OKAQEoRwSL/4wAJwRkiwASRCKMASKMAiKMAyKMBIsAcQhIMgMSSUAADosAcQhIiwBwAExIIhIRQQAGIowBQgAMiwBxCEiLAHAASIwBKmQyAxJJQAALKmSLAHAATEgiEhFBAAYijAJCAAkqZIsAcABIjAIrZDIDEklAAAsrZIsAcABMSCISEUEABiKMA0IACStkiwBwAEiMAylkMgMSSUAACylkiwBwAExIIhIRQQAGIowEQgAJKWSLAHAASIwEiwBxAEiLAQmLAgmLAwmLBAmMAEYEiYAEuER7NjYaAI4B/m8AgARwm4CogAQLYscogARcwsU1NhoAjgP+av6T/u8A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":23,"patch":1,"commitHash":"34171a94"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

// @ts-ignore
class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CirculatingSupply contract
 */
export type CirculatingSupplyArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'set_asset(uint64)void': {
      /**
       * ASA ID of the circulating supply
       */
      assetId: bigint | number
    }
    'set_not_circulating_address(address,string)void': {
      /**
       * Address to assign to the label to
       */
      address: string
      /**
       * Not-circulating label selector
       */
      label: string
    }
    'arc62_get_circulating_supply(uint64)uint64': {
      /**
       * ASA ID of the circulating supply
       */
      assetId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'set_asset(uint64)void': [assetId: bigint | number]
    'set_not_circulating_address(address,string)void': [address: string, label: string]
    'arc62_get_circulating_supply(uint64)uint64': [assetId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CirculatingSupplyReturns = {
  'createApplication()void': void
  'set_asset(uint64)void': void
  'set_not_circulating_address(address,string)void': void
  'arc62_get_circulating_supply(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the CirculatingSupply smart contract.
 */
export type CirculatingSupplyTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CirculatingSupplyArgs['obj']['createApplication()void']
      argsTuple: CirculatingSupplyArgs['tuple']['createApplication()void']
      returns: CirculatingSupplyReturns['createApplication()void']
    }>
    & Record<'set_asset(uint64)void' | 'set_asset', {
      argsObj: CirculatingSupplyArgs['obj']['set_asset(uint64)void']
      argsTuple: CirculatingSupplyArgs['tuple']['set_asset(uint64)void']
      returns: CirculatingSupplyReturns['set_asset(uint64)void']
    }>
    & Record<'set_not_circulating_address(address,string)void' | 'set_not_circulating_address', {
      argsObj: CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void']
      argsTuple: CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']
      returns: CirculatingSupplyReturns['set_not_circulating_address(address,string)void']
    }>
    & Record<'arc62_get_circulating_supply(uint64)uint64' | 'arc62_get_circulating_supply', {
      argsObj: CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64']
      argsTuple: CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']
      /**
       * ASA circulating supply
       */
      returns: CirculatingSupplyReturns['arc62_get_circulating_supply(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        notCirculatingLabel_1: string
        notCirculatingLabel_2: string
        notCirculatingLabel_3: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CirculatingSupplySignatures = keyof CirculatingSupplyTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CirculatingSupplyNonVoidMethodSignatures = keyof CirculatingSupplyTypes['methods'] extends infer T ? T extends keyof CirculatingSupplyTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CirculatingSupply smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CirculatingSupplySignatures> = CirculatingSupplyTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CirculatingSupply smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CirculatingSupplySignatures> = CirculatingSupplyTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CirculatingSupplyTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CirculatingSupplyCreateCallParams =
  | Expand<CallParams<CirculatingSupplyArgs['obj']['createApplication()void'] | CirculatingSupplyArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CirculatingSupplyArgs['obj']['createApplication()void'] | CirculatingSupplyArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CirculatingSupplyDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CirculatingSupplyCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CirculatingSupply smart contract
 */
export abstract class CirculatingSupplyParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CirculatingSupplyCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CirculatingSupplyParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CirculatingSupply smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CirculatingSupplyArgs['obj']['createApplication()void'] | CirculatingSupplyArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_asset(uint64)void ABI method
   *
   * Set the ASA ID for the circulating supply - Authorization: ASA Manager Address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAsset(params: CallParams<CirculatingSupplyArgs['obj']['set_asset(uint64)void'] | CirculatingSupplyArgs['tuple']['set_asset(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_asset(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the set_not_circulating_address(address,string)void ABI method
   *
   * Set non-circulating supply addresses - Authorization: ASA Manager Address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setNotCirculatingAddress(params: CallParams<CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void'] | CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_not_circulating_address(address,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address, params.args.label],
    }
  }
  /**
   * Constructs a no op call for the arc62_get_circulating_supply(uint64)uint64 ABI method
   *
   * Get ASA circulating supply
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc62GetCirculatingSupply(params: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc62_get_circulating_supply(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CirculatingSupply smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CirculatingSupplyFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CirculatingSupplyFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CirculatingSupplyClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CirculatingSupplyClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CirculatingSupply smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CirculatingSupplyDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CirculatingSupplyParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CirculatingSupplyCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CirculatingSupplyClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CirculatingSupply smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CirculatingSupplyArgs['obj']['createApplication()void'] | CirculatingSupplyArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CirculatingSupplyParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CirculatingSupply smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CirculatingSupplyArgs['obj']['createApplication()void'] | CirculatingSupplyArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CirculatingSupplyParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CirculatingSupply smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CirculatingSupplyArgs['obj']['createApplication()void'] | CirculatingSupplyArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CirculatingSupplyParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CirculatingSupplyReturns['createApplication()void']) }, appClient: new CirculatingSupplyClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CirculatingSupply smart contract
 */
export class CirculatingSupplyClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CirculatingSupplyClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CirculatingSupply app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CirculatingSupplyClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CirculatingSupplyNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CirculatingSupplyClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CirculatingSupplyClient> {
    return new CirculatingSupplyClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CirculatingSupplyClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CirculatingSupplyClient> {
    return new CirculatingSupplyClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CirculatingSupply smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `set_asset(uint64)void` ABI method.
     *
     * Set the ASA ID for the circulating supply - Authorization: ASA Manager Address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAsset: (params: CallParams<CirculatingSupplyArgs['obj']['set_asset(uint64)void'] | CirculatingSupplyArgs['tuple']['set_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CirculatingSupplyParamsFactory.setAsset(params))
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `set_not_circulating_address(address,string)void` ABI method.
     *
     * Set non-circulating supply addresses - Authorization: ASA Manager Address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setNotCirculatingAddress: (params: CallParams<CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void'] | CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CirculatingSupplyParamsFactory.setNotCirculatingAddress(params))
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get ASA circulating supply
     *
     * @param params The params for the smart contract call
     * @returns The call params: ASA circulating supply
     */
    arc62GetCirculatingSupply: (params: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CirculatingSupplyParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CirculatingSupply smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `set_asset(uint64)void` ABI method.
     *
     * Set the ASA ID for the circulating supply - Authorization: ASA Manager Address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAsset: (params: CallParams<CirculatingSupplyArgs['obj']['set_asset(uint64)void'] | CirculatingSupplyArgs['tuple']['set_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CirculatingSupplyParamsFactory.setAsset(params))
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `set_not_circulating_address(address,string)void` ABI method.
     *
     * Set non-circulating supply addresses - Authorization: ASA Manager Address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setNotCirculatingAddress: (params: CallParams<CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void'] | CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CirculatingSupplyParamsFactory.setNotCirculatingAddress(params))
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get ASA circulating supply
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: ASA circulating supply
     */
    arc62GetCirculatingSupply: (params: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CirculatingSupplyParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CirculatingSupply smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `set_asset(uint64)void` ABI method.
     *
     * Set the ASA ID for the circulating supply - Authorization: ASA Manager Address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAsset: async (params: CallParams<CirculatingSupplyArgs['obj']['set_asset(uint64)void'] | CirculatingSupplyArgs['tuple']['set_asset(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CirculatingSupplyParamsFactory.setAsset(params))
      return {...result, return: result.return as unknown as (undefined | CirculatingSupplyReturns['set_asset(uint64)void'])}
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `set_not_circulating_address(address,string)void` ABI method.
     *
     * Set non-circulating supply addresses - Authorization: ASA Manager Address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setNotCirculatingAddress: async (params: CallParams<CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void'] | CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CirculatingSupplyParamsFactory.setNotCirculatingAddress(params))
      return {...result, return: result.return as unknown as (undefined | CirculatingSupplyReturns['set_not_circulating_address(address,string)void'])}
    },

    /**
     * Makes a call to the CirculatingSupply smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get ASA circulating supply
     *
     * @param params The params for the smart contract call
     * @returns The call result: ASA circulating supply
     */
    arc62GetCirculatingSupply: async (params: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CirculatingSupplyParamsFactory.arc62GetCirculatingSupply(params))
      return {...result, return: result.return as unknown as (undefined | CirculatingSupplyReturns['arc62_get_circulating_supply(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CirculatingSupplyClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the CirculatingSupply smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get ASA circulating supply
   *
   * @param params The params for the smart contract call
   * @returns The call result: ASA circulating supply
   */
  async arc62GetCirculatingSupply(params: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']>) {
    const result = await this.appClient.send.call(CirculatingSupplyParamsFactory.arc62GetCirculatingSupply(params))
    return result.return as unknown as CirculatingSupplyReturns['arc62_get_circulating_supply(uint64)uint64']
  }

  /**
   * Methods to access state for the current CirculatingSupply app
   */
  state = {
    /**
     * Methods to access global state for the current CirculatingSupply app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.asset_id,
          notCirculatingLabel_1: result.not_circulating_label_1,
          notCirculatingLabel_2: result.not_circulating_label_2,
          notCirculatingLabel_3: result.not_circulating_label_3,
        }
      },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetId")) as bigint | undefined },
      /**
       * Get the current value of the not_circulating_label_1 key in global state
       */
      notCirculatingLabel_1: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("notCirculatingLabel_1")) as string | undefined },
      /**
       * Get the current value of the not_circulating_label_2 key in global state
       */
      notCirculatingLabel_2: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("notCirculatingLabel_2")) as string | undefined },
      /**
       * Get the current value of the not_circulating_label_3 key in global state
       */
      notCirculatingLabel_3: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("notCirculatingLabel_3")) as string | undefined },
    },
  }

  public newGroup(): CirculatingSupplyComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_asset(uint64)void method call against the CirculatingSupply contract
       */
      setAsset(params: CallParams<CirculatingSupplyArgs['obj']['set_asset(uint64)void'] | CirculatingSupplyArgs['tuple']['set_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_not_circulating_address(address,string)void method call against the CirculatingSupply contract
       */
      setNotCirculatingAddress(params: CallParams<CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void'] | CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setNotCirculatingAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc62_get_circulating_supply(uint64)uint64 method call against the CirculatingSupply contract
       */
      arc62GetCirculatingSupply(params: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc62GetCirculatingSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc62_get_circulating_supply(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the CirculatingSupply contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CirculatingSupplyComposer
  }
}
export type CirculatingSupplyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_asset(uint64)void ABI method.
   *
   * Set the ASA ID for the circulating supply - Authorization: ASA Manager Address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAsset(params?: CallParams<CirculatingSupplyArgs['obj']['set_asset(uint64)void'] | CirculatingSupplyArgs['tuple']['set_asset(uint64)void']>): CirculatingSupplyComposer<[...TReturns, CirculatingSupplyReturns['set_asset(uint64)void'] | undefined]>

  /**
   * Calls the set_not_circulating_address(address,string)void ABI method.
   *
   * Set non-circulating supply addresses - Authorization: ASA Manager Address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setNotCirculatingAddress(params?: CallParams<CirculatingSupplyArgs['obj']['set_not_circulating_address(address,string)void'] | CirculatingSupplyArgs['tuple']['set_not_circulating_address(address,string)void']>): CirculatingSupplyComposer<[...TReturns, CirculatingSupplyReturns['set_not_circulating_address(address,string)void'] | undefined]>

  /**
   * Calls the arc62_get_circulating_supply(uint64)uint64 ABI method.
   *
   * Get ASA circulating supply
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc62GetCirculatingSupply(params?: CallParams<CirculatingSupplyArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CirculatingSupplyArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']>): CirculatingSupplyComposer<[...TReturns, CirculatingSupplyReturns['arc62_get_circulating_supply(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CirculatingSupply smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CirculatingSupplyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CirculatingSupplyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CirculatingSupplyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CirculatingSupplyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CirculatingSupplyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CirculatingSupplyComposerResults<TReturns>>
}
export type CirculatingSupplyComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

